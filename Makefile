# Compiler and flags for C++
CXX = g++ # Use g++ for C++
# Use CXXFLAGS for C++ compilation flags
# Add a C++ standard, e.g., -std=c++14
# Add -MMD -MP to generate dependency files (.d)
# Add -I$(SRC_DIR) if headers might be alongside source files in subdirs
CXXFLAGS = -Wall -Wextra -std=c++14 -I./include -I$(SRC_DIR) -MMD -MP
# LDFLAGS remain mostly the same, but use CXX for linking to include std C++ libs automatically
LDFLAGS = -lreadline

# Directories (remain the same)
SRC_DIR = ./src
INC_DIR = ./include # Included via CXXFLAGS
BUILD_DIR = ./build
# Define the desired log directory using the HOME environment variable
# Ensure HOME is set in your environment for this to work
LOG_DIR = $(HOME)/uconnux

# Target executable name (remains the same)
TARGET = uconnux-cli

# Find all C++ source files recursively within SRC_DIR (change extension)
SOURCES = $(shell find $(SRC_DIR) -name '*.cpp') # Look for .cpp files

# Define corresponding object files in BUILD_DIR, preserving subdirectory structure (change extension in pattern)
OBJECTS = $(patsubst $(SRC_DIR)/%.cpp, $(BUILD_DIR)/%.o, $(SOURCES))

# Define corresponding dependency files in BUILD_DIR, preserving subdirectory structure (change extension in pattern)
DEPS = $(patsubst $(SRC_DIR)/%.cpp, $(BUILD_DIR)/%.d, $(SOURCES))

# Default target: Build the executable AND ensure the log directory exists
# Make 'all' depend on both the target executable and the log directory target
all: $(BUILD_DIR)/$(TARGET) $(LOG_DIR)

# Rule to link object files into the final executable
# Use $(CXX) for linking C++ projects
# Added BUILD_DIR as an order-only prerequisite
$(BUILD_DIR)/$(TARGET): $(OBJECTS) | $(BUILD_DIR)
	@echo "Linking..."
	$(CXX) $(OBJECTS) -o $@ $(LDFLAGS) # Use CXX for linking
	@echo "Build finished: $@"

# Include the dependency files (.d) generated by the compiler
# This works the same for C and C++ with -MMD -MP
-include $(DEPS)

# Rule to compile C++ source files into object files (change source extension and compiler/flags)
# Creates necessary subdirectories in BUILD_DIR before compiling
$(BUILD_DIR)/%.o: $(SRC_DIR)/%.cpp | $(BUILD_DIR) # Depend on .cpp, ensure top-level build dir exists
	@echo "Compiling $< -> $@"
	@mkdir -p $(dir $@) # Ensure the target object directory exists in BUILD_DIR
	$(CXX) $(CXXFLAGS) -c $< -o $@ # Use CXX and CXXFLAGS

# Rule to create the top-level build directory (remains the same)
$(BUILD_DIR):
	@echo "Creating build directory: $@"
	@mkdir -p $@

# Rule to create the log directory (if it doesn't exist) (remains the same)
# This is NOT phony because it represents a real directory on the filesystem
# Make will check if the directory $(LOG_DIR) exists. If not, it runs the command.
$(LOG_DIR):
	@echo "Ensuring log directory exists: $@"
	@mkdir -p $@

# Clean up build artifacts (removes ONLY the build dir) (remains the same)
# NOTE: We intentionally DO NOT clean the LOG_DIR here, as it might contain valuable logs.
clean:
	@echo "Cleaning build directory: $(BUILD_DIR)"
	@rm -rf $(BUILD_DIR)

# Declare non-file targets as phony (remains the same)
.PHONY: all clean list

# Optional: Add a rule to list found sources/objects for debugging (updated to show C++ sources)
list:
	@echo "Sources (.cpp):"
	@echo "$(SOURCES)"
	@echo "Objects (.o):"
	@echo "$(OBJECTS)"
	@echo "Deps (.d):"
	@echo "$(DEPS)"
	@echo "Log Directory Variable:"
	@echo "$(LOG_DIR)"
