CC = gcc
# Add -MMD -MP to generate dependency files (.d)
CFLAGS = -Wall -I./include -MMD -MP
LDFLAGS =
SRC_DIR = ./src
INC_DIR = ./include # Kept for clarity, used via CFLAGS
BUILD_DIR = ./build
TARGET = uconnux-cli

# Find all source files
SOURCES = $(wildcard $(SRC_DIR)/*.c)
# Define corresponding object files in BUILD_DIR
OBJECTS = $(SOURCES:$(SRC_DIR)/%.c=$(BUILD_DIR)/%.o)
# Define corresponding dependency files in BUILD_DIR
DEPS = $(OBJECTS:.o=.d)

# Default target
all: $(BUILD_DIR)/$(TARGET)

# Rule to link object files into the final executable
# Added BUILD_DIR as an order-only prerequisite to ensure it exists
$(BUILD_DIR)/$(TARGET): $(OBJECTS) | $(BUILD_DIR)
	$(CC) $(OBJECTS) -o $@ $(LDFLAGS)

# Include the dependency files (.d) generated by the compiler
# The '-' suppresses errors if the .d file doesn't exist initially
-include $(DEPS)

# Rule to compile source files into object files
# Added BUILD_DIR as an order-only prerequisite
# %.c depends on %.h implicitly via the included .d files
$(BUILD_DIR)/%.o: $(SRC_DIR)/%.c | $(BUILD_DIR)
	$(CC) $(CFLAGS) -c $< -o $@

# Rule to create the build directory (used as an order-only prerequisite)
# This rule only runs if the directory doesn't exist
$(BUILD_DIR):
	mkdir -p $@

# Clean up build artifacts (removes the whole build dir)
clean:
	rm -rf $(BUILD_DIR)

# Declare non-file targets as phony
.PHONY: all clean
